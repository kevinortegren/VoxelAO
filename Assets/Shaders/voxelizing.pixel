RWByteAddressBuffer gridBuffer: register(u1);

struct GS_Output
{
	float4 position: SV_POSITION;
	float3 positionWS: WORLD_POS;
};

void main(GS_Output input) 
{
	// get offset into the voxel-grid
	float3 offset = input.positionWS / VOXELWIDTH;

	offset = floor(offset);

	// get position in the voxel-grid
	int3 voxelPos = int3(VOXELSIZE/2, VOXELSIZE/2, VOXELSIZE/2) + int3(offset.x, offset.y, offset.z);

	if((voxelPos.x > -1) && (voxelPos.x < VOXELSIZE) && (voxelPos.y > -1) && (voxelPos.y < VOXELSIZE) && (voxelPos.z > -1) && (voxelPos.z < VOXELSIZE))
	{
		uint voxel_z = uint(voxelPos.z) / 32;
	
		// get index into the voxel-grid
		uint gridIndex = (voxelPos.x + VOXELSIZE * voxelPos.y + VOXELSIZE * VOXELSIZE * voxel_z) * 4;

		uint bit_position = uint(voxelPos.z) % 32;
		uint bit_mask = 1;
		bit_mask = bit_mask << bit_position;

		gridBuffer.InterlockedOr(gridIndex, bit_mask);
	}
}


