cbuffer sampleKernel : register(b0)
{
	float4 sampleKernel[25];
};

Texture2D<float4> diffuse : register(t0);
Texture2D<float4> normal : register(t1);
Texture2D<float4> wpos : register(t2);
Texture2D<float> depthTex : register(t3);
ByteAddressBuffer gridBuffer: register(t4);

float3x3 build_ortho_basis(in float3 normal)
{
	float3 b1;
	float3 b2;

	if (normal.z < -0.9999999f) // Handle the singularity
	{
		b1 = float3(0.0f, -1.0f, 0.0f);
		b2 = float3(-1.0f, 0.0f, 0.0f);
	}
	else
	{
		const float a = 1.0f / (1.0f + normal.z);
		const float b = -normal.x * normal.y * a;
		b1 = float3(1.0f - normal.x * normal.x * a, b, -normal.x);
		b2 = float3(b, 1.0f - normal.y * normal.y * a, -normal.y);
	}

	return float3x3(b1, b2, normal);
}

float4 main(float4 position : SV_POSITION) : SV_TARGET
{
	int3 screenPos = int3(position.xy, 0);
	float4 diff = diffuse.Load(screenPos);
	float4 norm = normal.Load(screenPos);
	float4 pos = wpos.Load(screenPos);

	const int steps = 4;
	const float rmax = 9.0f;
	const float step_length = rmax / float(steps);
	const float guard = (4.0f * (sqrt(3.0f) / 2.0f));
	
	const float3x3 tbn = build_ortho_basis(normalize(norm.xyz));
	 
	float ambient_factor = 0.0f;

	for(int i = 0; i < 25; ++i)
	{
		float3 raydir = normalize(mul(sampleKernel[i].xyz, tbn));
		float d = (guard / dot(raydir, norm.xyz));
		float3 d0 = pos.xyz + raydir * d;
		
		float hitDist = 0.0f;

		while(d < rmax)
		{
			float3 offset = d0 / 3.0f;

			offset = floor(offset);

			// get position in the voxel-grid
			int3 voxelPos = int3(512, 512, 512) + int3(offset.x, offset.y, offset.z);

			uint voxel_z = uint(voxelPos.z) / 32;
	
			// get index into the voxel-grid
			uint gridIndex = (voxelPos.x + 1024 * voxelPos.y + 1024 * 1024 * voxel_z) * 4;

			uint bit_position = uint(voxelPos.z) % 32;
			uint voxel_chunk = gridBuffer.Load(gridIndex);
			voxel_chunk = voxel_chunk >> bit_position;

			if(voxel_chunk == 1)
			{
				hitDist = d;
				break;
			}
				
			d0 += raydir * step_length;
			d += step_length;
		}

		ambient_factor += hitDist / rmax;
	}
	


	ambient_factor /= 25.0f;
	ambient_factor *= 1.5f; 
	ambient_factor =  1.0f - saturate(ambient_factor);

	return diff*float4(ambient_factor,ambient_factor,ambient_factor,1);
}